import os 

configfile: "configs/config_control.json"
configname = config["config_name"]

# Get all combinations through the config file
def get_combinations(config, config_key):
    # Iterate over keys and values of config
    combinations = []
    for key, value in config[config_key].items():
        data_folder = value["data_folder"]
        ds_celltypes = value["ds_celltypes"]
        ds_proportions = value["ds_proportions"]
        num_batches = value["num_batches"]
        repetitions = value["repetitions"]
        if config_key == "int_ti_datasets":
            root_celltype = value["root_celltype"]
        # Get combinations of celltypes and proportions - sort by config_key (root celltype or not for TI)
        for num_batch in num_batches:
            for ds_celltype in ds_celltypes:
                for ds_proportion in ds_proportions:
                    for repetition in range(repetitions):
                        if config_key == "int_ti_datasets":
                            combinations.append(
                                "{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes_{ds_proportion}_downsample_{num_batch}_batch_ds_c_{rep}".format(
                                    data_folder = data_folder,
                                    root_celltype = root_celltype,
                                    ds_celltype = ds_celltype, 
                                    ds_proportion = ds_proportion,
                                    num_batch = num_batch,
                                    rep = repetition
                                )
                            )
                        else:
                            combinations.append(
                                "{data_folder}_{ds_celltype}_celltypes_{ds_proportion}_downsample_{num_batch}_batch_ds_c_{rep}".format(
                                    data_folder = data_folder,
                                    ds_celltype = ds_celltype, 
                                    ds_proportion = ds_proportion,
                                    num_batch = num_batch,
                                    rep = repetition
                                )
                            )
    return combinations

# All rule - return summary results and intermediate integration h5ad files
if config["query_to_reference"] == "Yes":
    rule all:
        input:
            expand(
                "../results/{configname}/{outputs[0]}/{dataset}_{outputs[1]}.{outputs[2]}",
                configname = configname,
                dataset = get_combinations(config, "int_ti_datasets"),
                outputs = zip(
                    [
                        "paga_integrated_results",
                        "paga_imbalance_summaries"
                    ], 
                    [
                        "paga_integrated",
                        "paga_imbalance_summary"
                    ],
                    [
                        "h5ad",
                        "tsv"
                    ]
                )
            ),
            expand(
                "../results/{configname}/{outputs[0]}/{dataset}_{outputs[1]}.{outputs[2]}",
                configname = configname,
                dataset = get_combinations(config, "int_datasets"),
                outputs = zip(
                    [
                        "integrated_results",
                        "downsample_summaries", 
                        "clustering_summaries", 
                        "clustering_concord_summaries",
                        "dge_concord_full",
                        "dge_concord_stats",
                        "dge_ranking_stats",
                        "dge_ranking_stats_marker_sub",
                        "imbalance_summaries",
                        "celltype_imbalance_summaries",
                        "knn_classification_reports",
                        "query_to_reference",
                        "annotation_results",
                        "annotation_scores"
                    ], 
                    [
                        "integrated",
                        "downsample_summary", 
                        "clustering_summary", 
                        "clustering_concord_summary",
                        "dge_concord_full",
                        "dge_concord_stats",
                        "dge_ranking_stats",
                        "dge_ranking_stats_marker_sub",
                        "imbalance_summary",
                        "celltype_imbalance_summary",
                        "knn_classification",
                        "reference_annotated",
                        "annotation_result",
                        "annotation_score"
                    ],
                    [
                        "h5ad",
                        "tsv", 
                        "tsv", 
                        "tsv", 
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv",
                        "h5ad",
                        "tsv",
                        "tsv"
                    ]
                )
            ),
            expand(
                "../results/{configname}/marker_results/{dataset}_preintegration_marker_selection.tsv",
                    configname = configname,
                    dataset = [config["int_datasets"][key]["data_folder"] for key in config["int_datasets"].keys()]
            )
else:
    rule all:
        input:
            expand(
                "../results/{configname}/{outputs[0]}/{dataset}_{outputs[1]}.{outputs[2]}",
                configname = configname,
                dataset = get_combinations(config, "int_ti_datasets"),
                outputs = zip(
                    [
                        "paga_integrated_results",
                        "paga_imbalance_summaries"
                    ], 
                    [
                        "paga_integrated",
                        "paga_imbalance_summary"
                    ],
                    [
                        "h5ad",
                        "tsv"
                    ]
                )
            ),
            expand(
                "../results/{configname}/{outputs[0]}/{dataset}_{outputs[1]}.{outputs[2]}",
                configname = configname,
                dataset = get_combinations(config, "int_datasets"),
                outputs = zip(
                    [
                        "integrated_results",
                        "downsample_summaries", 
                        "clustering_summaries", 
                        "clustering_concord_summaries",
                        "dge_concord_full",
                        "dge_concord_stats",
                        "dge_ranking_stats",
                        "dge_ranking_stats_marker_sub",
                        "imbalance_summaries",
                        "celltype_imbalance_summaries",
                        "knn_classification_reports"
                    ], 
                    [
                        "integrated",
                        "downsample_summary", 
                        "clustering_summary", 
                        "clustering_concord_summary",
                        "dge_concord_full",
                        "dge_concord_stats",
                        "dge_ranking_stats",
                        "dge_ranking_stats_marker_sub",
                        "imbalance_summary",
                        "celltype_imbalance_summary",
                        "knn_classification"
                    ],
                    [
                        "h5ad",
                        "tsv", 
                        "tsv", 
                        "tsv", 
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv",
                        "tsv"
                    ]
                )
            ),
            expand(
                "../results/{configname}/marker_results/{dataset}_preintegration_marker_selection.tsv",
                    configname = configname,
                    dataset = [config["int_datasets"][key]["data_folder"] for key in config["int_datasets"].keys()]
            )

# Integrate the indicated h5ad files from config, based on dataset 
rule integrate:
    conda:
        "envs/integrate.yaml"
    input:
        "../resources/h5ad_files/int_datasets/{data_folder}"
    output:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    params:
        script_path = "scripts/python/integrate_data.py",
    log:
        "logs/{configname}/integrate/integrate_{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}.log"
    priority: 0
    shell:
        """
        python {params.script_path} \
            --filedir {input} \
            --ds_celltypes {wildcards.ds_celltype} \
            --ds_proportions {wildcards.ds_proportion} \
            --num_batches {wildcards.num_batches} \
            --outfile {output} \
            &> {log}
        """

# Perform PAGA integration of the indicated h5ad files from config 
rule integrate_paga:
    conda:
        "envs/integrate.yaml"
    input:
        "../resources/h5ad_files/int_paga_datasets/{data_folder}"
    output:
        "../results/{configname}/paga_integrated_results/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_integrated.h5ad"
    params:
        script_path = "scripts/python/integrate_data_paga.py",
    log:
        "logs/{configname}/paga_integrate/integrate_paga_{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes_" + 
        "{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}.log"
    priority: 0
    shell:
        """
        python {params.script_path} \
            --filedir {input} \
            --root_celltype {wildcards.root_celltype} \
            --ds_celltypes {wildcards.ds_celltype} \
            --ds_proportions {wildcards.ds_proportion} \
            --num_batches {wildcards.num_batches} \
            --outfile {output} \
            &> {log}
        """
        
# Get summary results of downsampling - dataset based
rule downsample_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/downsample_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_downsample_summary.tsv"
    params:
        script_path = "scripts/python/downsample_summary.py",
    log:
        "logs/{configname}/downsample_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_downsample_summary.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """
    
# Get cluster summary results of downsampling, pertaining to integration stats 
rule clustering_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/clustering_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_summary.tsv"
    params:
        script_path = "scripts/python/clustering_stats.py",
    log:
        "logs/{configname}/clustering_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_summary.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get clustering concordance results from different methods after intergration 
rule clustering_concord_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/clustering_concord_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_concord_summary.tsv"
    params:
        script_path = "scripts/python/clustering_concordance.py",
    log:
        "logs/{configname}/clustering_concord_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_concord_summary.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get DGE concordance results (full dge) (from different methods) from downsampling
rule dge_concord_full:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/dge_concord_full/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_concord_full.tsv"
    params:
        script_path = "scripts/python/dge_concordance_full.py",
    log:
        "logs/{configname}/dge_concord_full/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_concord_full.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get DGE concordance results (summary stats) (from different methods) from downsampling
rule dge_concord_stats:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/dge_concord_stats/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_concord_stats.tsv"
    params:
        script_path = "scripts/python/dge_concordance_stats.py",
    log:
        "logs/{configname}/dge_concord_stats/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_concord_stats.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get DGE ranking concordance results (from different methods) from downsampling using Leiden clustering
rule dge_ranking_stats:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/dge_ranking_stats/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_ranking_stats.tsv"
    params:
        script_path = "scripts/python/dge_ranking_concordance.py",
    log:
        "logs/{configname}/dge_ranking_stats/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_ranking_stats.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get imbalance summary results for integration datasets - vanilla integration 
rule imbalance_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/imbalance_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_imbalance_summary.tsv"
    params:
        script_path = "scripts/python/imbalance_summary.py",
    log:
        "logs/{configname}/imbalance_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_imbalance_summary.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get imbalance summary at a celltype level for integration datasets - vanilla integration
rule celltype_imbalance_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/celltype_imbalance_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_celltype_imbalance_summary.tsv"
    params:
        script_path = "scripts/python/celltype_imbalance_summary.py",
    log:
        "logs/{configname}/celltype_imbalance_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_celltype_imbalance_summary.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get imbalance summary results for trajectory-specific datasets - integration followed by PAGA trajectory inference
rule imbalance_summary_paga:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/paga_integrated_results/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_integrated.h5ad"
    output:
        "../results/{configname}/paga_imbalance_summaries/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_imbalance_summary.tsv"
    params:
        script_path = "scripts/python/imbalance_summary.py",
    log:
        "logs/{configname}/paga_imbalance_summary/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_imbalance_summary.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get KNN classification statistics for each celltype post integration for each method
rule knn_classification:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/knn_classification_reports/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_knn_classification.tsv"
    params:
        script_path = "scripts/python/knn_classification.py",
    log:
        "logs/{configname}/knn_classification_report/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_knn_classification.log"
    priority: 50
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get Marker genes for each celltype before any integration (top 10) across batches for subsetting DGE results
rule marker_get:
    conda:
        "envs/integrate.yaml"
    input:
        "../resources/h5ad_files/int_datasets/{data_folder}"
    output:
        "../results/{configname}/marker_results/{data_folder}_preintegration_marker_selection.tsv"
    params:
        script_path = "scripts/python/marker_get.py",
    log:
        "logs/{configname}/marker_get/{data_folder}_preintegration_marker_selection.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --filedir {input} \
            --outfile {output} \
            &> {log}
        """
    
# Subset dge ranking dfs for marker genes 
rule dge_rank_marker_subset:
    conda:
        "envs/integrate.yaml"
    input:
        dge_file="../results/{configname}/dge_ranking_stats/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_ranking_stats.tsv",
        marker_file="../results/{configname}/marker_results/{data_folder}_preintegration_marker_selection.tsv"
    output:
        "../results/{configname}/dge_ranking_stats_marker_sub/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_ranking_stats_marker_sub.tsv"
    params:
        script_path = "scripts/python/dge_ranking_marker_subset.py",
    log:
        "logs/{configname}/dge_ranking_stats_marker_sub/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_ranking_stats_marker_sub.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile_dge_rank {input.dge_file} \
            --infile_marker {input.marker_file} \
            --outfile {output} \
            &> {log}
        """

# Perform query to reference mapping experiment and get annotations for each dataset
rule query_to_reference:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/query_to_reference/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_reference_annotated.h5ad"
    params:
        script_path = "scripts/python/reference_annotation.py",
        reference_path = "../resources/references/h5Seurat_files/{data_folder}/{data_folder}.h5seurat"
    log:
        "logs/{configname}/query_to_reference/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_reference_annotated.log"
    priority: 0
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --ref_file {params.reference_path} \
            --outfile {output} \
            &> {log}
        """

# Returning overall query to reference annotation results 
rule annotation_result:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/query_to_reference/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_reference_annotated.h5ad"
    output:
        "../results/{configname}/annotation_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_annotation_result.tsv"
    params:
        script_path = "scripts/python/annotation_results.py"
    log:
        "logs/{configname}/annotation_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_annotation_result.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            --ds_celltypes {wildcards.ds_celltype} \
            --ds_proportions {wildcards.ds_proportion} \
            --num_batches {wildcards.num_batches} \
            &> {log}
        """    

# Analysis of query to reference annotation results
rule annotation_score:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/query_to_reference/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_reference_annotated.h5ad"
    output:
        "../results/{configname}/annotation_scores/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_annotation_score.tsv"
    params:
        script_path = "scripts/python/annotation_scoring.py",
        score_guide_path = "../resources/annotation_guides/{data_folder}/{data_folder}_score_guide.tsv"
    log:
        "logs/{configname}/annotation_scores/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_annotation_score.log"
    priority: 100
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --annofile {params.score_guide_path} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            --ds_celltypes {wildcards.ds_celltype} \
            --ds_proportions {wildcards.ds_proportion} \
            --num_batches {wildcards.num_batches} \
            &> {log}
        """