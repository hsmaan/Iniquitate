import os 

configfile: "configs/config_control.json"
configname = config["config_name"]

# Get all combinations through the config file
def get_combinations(config, config_key):
    # Iterate over keys and values of config
    combinations = []
    for key, value in config[config_key].items():
        data_folder = value["data_folder"]
        ds_celltypes = value["ds_celltypes"]
        ds_proportions = value["ds_proportions"]
        num_batches = value["num_batches"]
        repetitions = value["repetitions"]
        if config_key == "int_ti_datasets":
            root_celltype = value["root_celltype"]
        # Get combinations of celltypes and proportions - sort by config_key (root celltype or not for TI)
        for num_batch in num_batches:
            for ds_celltype in ds_celltypes:
                for ds_proportion in ds_proportions:
                    for repetition in range(repetitions):
                        if config_key == "int_ti_datasets":
                            combinations.append(
                                "{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes_{ds_proportion}_downsample_{num_batch}_batch_ds_c_{rep}".format(
                                    data_folder = data_folder,
                                    root_celltype = root_celltype,
                                    ds_celltype = ds_celltype, 
                                    ds_proportion = ds_proportion,
                                    num_batch = num_batch,
                                    rep = repetition
                                )
                            )
                        else:
                            combinations.append(
                                "{data_folder}_{ds_celltype}_celltypes_{ds_proportion}_downsample_{num_batch}_batch_ds_c_{rep}".format(
                                    data_folder = data_folder,
                                    ds_celltype = ds_celltype, 
                                    ds_proportion = ds_proportion,
                                    num_batch = num_batch,
                                    rep = repetition
                                )
                            )
    return combinations

# All rule
rule all:
    input:
        expand(
            "../results/{configname}/{outputs[0]}/{dataset}_{outputs[1]}.{outputs[2]}",
            configname = configname,
            dataset = get_combinations(config, "int_ti_datasets"),
            outputs = zip(
                [
                    "paga_integrated_results",
                    "paga_imbalance_summaries"
                ], 
                [
                    "paga_integrated",
                    "paga_imbalance_summary"
                ],
                [
                    "h5ad",
                    "tsv"
                ]
            )
        ),
        expand(
            "../results/{configname}/{outputs[0]}/{dataset}_{outputs[1]}.{outputs[2]}",
            configname = configname,
            dataset = get_combinations(config, "int_datasets"),
            outputs = zip(
                [
                    "integrated_results",
                    "downsample_summaries", 
                    "clustering_summaries", 
                    "clustering_concord_summaries",
                    "dge_concord_summaries",
                    "imbalance_summaries",
                ], 
                [
                    "integrated",
                    "downsample_summary", 
                    "clustering_summary", 
                    "clustering_concord_summary",
                    "dge_concord_summary",
                    "imbalance_summary",
                ],
                [
                    "h5ad",
                    "tsv", 
                    "tsv", 
                    "tsv", 
                    "tsv",
                    "tsv"
                ]
            )
        )

# Integrate the indicated h5ad files from config
rule integrate:
    conda:
        "envs/integrate.yaml"
    input:
        "../resources/h5ad_files/int_datasets/{data_folder}"
    output:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    params:
        script_path = "scripts/python/integrate_data.py",
    log:
        "logs/{configname}/integrate/integrate_{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}.log"
    shell:
        """
        python {params.script_path} \
            --filedir {input} \
            --ds_celltypes {wildcards.ds_celltype} \
            --ds_proportions {wildcards.ds_proportion} \
            --num_batches {wildcards.num_batches} \
            --outfile {output} \
            &> {log}
        """

# Perform PAGA integration of the indicated h5ad files from config 
rule integrate_paga:
    conda:
        "envs/integrate.yaml"
    input:
        "../resources/h5ad_files/int_paga_datasets/{data_folder}"
    output:
        "../results/{configname}/paga_integrated_results/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_integrated.h5ad"
    params:
        script_path = "scripts/python/integrate_data_paga.py",
    log:
        "logs/{configname}/paga_integrate/integrate_paga_{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes_" + 
        "{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}.log"
    shell:
        """
        python {params.script_path} \
            --filedir {input} \
            --root_celltype {wildcards.root_celltype} \
            --ds_celltypes {wildcards.ds_celltype} \
            --ds_proportions {wildcards.ds_proportion} \
            --num_batches {wildcards.num_batches} \
            --outfile {output} \
            &> {log}
        """
        
# Get summary results of downsampling 
rule downsample_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/downsample_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_downsample_summary.tsv"
    params:
        script_path = "scripts/python/downsample_summary.py",
    log:
        "logs/{configname}/downsample_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_downsample_summary.log"
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """
    
# Get cluster summary results of downsampling
rule clustering_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/clustering_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_summary.tsv"
    params:
        script_path = "scripts/python/clustering_stats.py",
    log:
        "logs/{configname}/clustering_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_summary.log"
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get clustering concordance results (from different methods) from downsampling
rule clustering_concord_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/clustering_concord_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_concord_summary.tsv"
    params:
        script_path = "scripts/python/clustering_concordance.py",
    log:
        "logs/{configname}/clustering_concord_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_clustering_concord_summary.log"
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get DGE concordance results (from different methods) from downsampling
rule dge_concord_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/dge_concord_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_concord_summary.tsv"
    params:
        script_path = "scripts/python/dge_concordance.py",
    log:
        "logs/{configname}/dge_concord_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_dge_concord_summary.log"
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

# Get imbalance summary results for all datasets - vanilla integration and PAGA-based 
rule imbalance_summary:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/integrated_results/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_integrated.h5ad"
    output:
        "../results/{configname}/imbalance_summaries/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" + 
        "_downsample_{num_batches}_batch_ds_c_{rep}_imbalance_summary.tsv"
    params:
        script_path = "scripts/python/imbalance_summary.py",
    log:
        "logs/{configname}/imbalance_summary/{data_folder}_{ds_celltype}_celltypes_{ds_proportion}" +
        "_downsample_{num_batches}_batch_ds_c_{rep}_imbalance_summary.log"
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """

rule imbalance_summary_paga:
    conda:
        "envs/integrate.yaml"
    input:
        "../results/{configname}/paga_integrated_results/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_integrated.h5ad"
    output:
        "../results/{configname}/paga_imbalance_summaries/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_imbalance_summary.tsv"
    params:
        script_path = "scripts/python/imbalance_summary.py",
    log:
        "logs/{configname}/paga_imbalance_summary/{data_folder}_root_{root_celltype}_{ds_celltype}_celltypes" +
        "_{ds_proportion}_downsample_{num_batches}_batch_ds_c_{rep}_paga_imbalance_summary.log"
    shell:
        """
        python {params.script_path} \
            --infile {input} \
            --outfile {output} \
            --dataset {wildcards.data_folder} \
            --rep {wildcards.rep} \
            &> {log}
        """